<Program> = <Function> 
          | <Function> <Program>

<Function> = func <Name> () { <Block> }
           | func <Name> (<Parameters>) { <Block> }

<Parameters> = <Name>
             | <Name>, <Parameters>

<Block> = ;
        | <Statement> <Block>
        | <Statement>

<Statement> = <Name> = <ValueExp>;
            | return <ValueExp>;
            | if (<BoolExp>) {<Block>}
            | if (<BoolExp>) {<Block>} else {<Block>}
            | while (<BoolExp>) {<Block>}
            | print (<ValueExp>);
            | <FuncCall>

<FuncCall> = <Name> ();
           | <Name> (<Arguments>);

<Arguments> = <ValueExp>
            | <ValueExp>, <Arguments>

<ValueExp> = <BoolExp>
           | <ArithmeticExp>
           | <StringExp>
           | <FuncCall>
           | <Name>
           | read (<StringExp>)
           | getNumber (<StringExp>)

<BoolExp> = true
          | false
          | <Name>
          | <FuncCall>
          | <BoolExp> && <BoolExp>
          | <BoolExp> || <BoolExp>
          | ! <BoolExp>
          | <RelationalBinaryArithmetic>
          | <RelationalBinaryString>


<RelationalBinaryArithmetic> = <ArithmeticExp> == <ArithmeticExp>
                             | <ArithmeticExp> != <ArithmeticExp>
                             | <ArithmeticExp> < <ArithmeticExp>
                             | <ArithmeticExp> <= <ArithmeticExp>
                             | <ArithmeticExp> > <ArithmeticExp>
                             | <ArithmeticExp> >= <ArithmeticExp>

<RelationalBinaryString> = <StringExp> == <StringExp>
                         | <StringExp> != <StringExp>
                         | <StringExp> < <StringExp>
                         | <StringExp> <= <StringExp>
                         | <StringExp> > <StringExp>
                         | <StringExp> >= <StringExp>
                                

<ArithmeticExp> = <Number>
                | <Name>
                | <FuncCall>
                | - <ArithmeticExp>
                | <ArithmeticExp> + <ArithmeticExp>
                | <ArithmeticExp> - <ArithmeticExp>
                | <ArithmeticExp> * <ArithmeticExp>
                | <ArithmeticExp> / <ArithmeticExp>
                | <ArithmeticExp> % <ArithmeticExp>
                | <ArithmeticExp> ** <ArithmeticExp>

<StringExp> = <String>
            | <Name>
            | <FuncCall>
            | <StringExp> ++ <StringExp>

<String> = "<Character>*"

<Character> = any ASCII character

<Number> = 0 | [1-9][0-9]*

<Name> = [a-zA-Z0-9_-]+            